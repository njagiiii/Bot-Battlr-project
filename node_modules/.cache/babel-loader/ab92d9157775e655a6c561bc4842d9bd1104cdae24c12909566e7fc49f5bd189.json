{"ast":null,"code":"var _jsxFileName = \"/home/makena/Bot/src/Component/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport BotMap from \"./BotMap\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotCollection = () => {\n  _s();\n  const [data, setData] = useState([]); //create the state of the current data\n  const [selectedCard, setselectedCard] = useState(null); // create state of the selected card\n\n  const handleClick = card => {\n    setselectedCard(card); //  function that handles the display of the selectedcard\n  };\n\n  const handleClose = () => {\n    setselectedCard(null);\n  };\n\n  //Fetch data\n  const fetchData = () => {\n    fetch(\"http://localhost:3000/bots\").then(res => res.json()).then(data => setData(data)).catch(error => console.log(\"Error fetching\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(BotArmy, {\n      handleenlist: handleEnlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), selectedCard ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      card: selectedCard,\n      onClose: handleClose,\n      handleenlist: handleEnlist\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BotMap, {\n      data: data,\n      onCardClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      data: data,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(BotCollection, \"Fixl6GTgs94Lb/fakzR/lDP8Hsk=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useEffect","useState","BotMap","BotSpecs","SortBar","jsxDEV","_jsxDEV","BotCollection","_s","data","setData","selectedCard","setselectedCard","handleClick","card","handleClose","fetchData","fetch","then","res","json","catch","error","console","log","children","BotArmy","handleenlist","handleEnlist","fileName","_jsxFileName","lineNumber","columnNumber","onClose","onCardClick","_c","$RefreshReg$"],"sources":["/home/makena/Bot/src/Component/BotCollection.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport BotMap from \"./BotMap\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nconst BotCollection = () => {\n  const [data, setData] = useState([]);  //create the state of the current data\n  const [selectedCard, setselectedCard] = useState(null); // create state of the selected card\n\n  const handleClick = (card) => {\n    setselectedCard(card); //  function that handles the display of the selectedcard\n  };\n\n  const handleClose = () => {\n    setselectedCard(null);\n  };\n\n  //Fetch data\n  const fetchData = () => {\n    fetch(\"http://localhost:3000/bots\")\n      .then((res) => res.json())\n      .then((data) => setData(data))\n      .catch((error) => console.log(\"Error fetching\", error));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      <BotArmy handleenlist={handleEnlist}/>\n      {/* if card is selected render on the BotSpecs */}\n      {selectedCard ? (\n        <BotSpecs card={selectedCard} onClose={handleClose} handleenlist={handleEnlist}/>\n      ) : (\n        <BotMap data={data} onCardClick={handleClick} />\n      )}\n      <SortBar data={data} setData={setData} />\n    </div>\n  );\n};\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;EACvC,MAAM,CAACU,YAAY,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAExD,MAAMY,WAAW,GAAIC,IAAI,IAAK;IAC5BF,eAAe,CAACE,IAAI,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBH,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMI,SAAS,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAET,IAAI,IAAKC,OAAO,CAACD,IAAI,CAAC,CAAC,CAC7BY,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC,CAAC;EAC3D,CAAC;EAEDtB,SAAS,CAAC,MAAM;IACdgB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAAmB,QAAA,gBACEnB,OAAA,CAACoB,OAAO;MAACC,YAAY,EAAEC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAErCrB,YAAY,gBACXL,OAAA,CAACH,QAAQ;MAACW,IAAI,EAAEH,YAAa;MAACsB,OAAO,EAAElB,WAAY;MAACY,YAAY,EAAEC;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,gBAEjF1B,OAAA,CAACJ,MAAM;MAACO,IAAI,EAAEA,IAAK;MAACyB,WAAW,EAAErB;IAAY;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAChD,eACD1B,OAAA,CAACF,OAAO;MAACK,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA;IAAQ;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV,CAAC;AAACxB,EAAA,CApCID,aAAa;AAAA4B,EAAA,GAAb5B,aAAa;AAsCnB,eAAeA,aAAa;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}