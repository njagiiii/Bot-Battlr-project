{"ast":null,"code":"var _jsxFileName = \"/home/makena/Bot/src/Component/BotCollection.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport BotMap from \"./BotMap\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nimport BotArmy from \"./BotArmy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BotCollection = () => {\n  _s();\n  //create the state of the current data\n  const [data, setData] = useState([]);\n\n  // create state of the selected card\n  const [selectedCard, setselectedCard] = useState(null);\n\n  //  function that handles the display of the selectedcard\n  const handleClick = card => {\n    setselectedCard(card);\n  };\n\n  //  function to close the selected card\n  const handleClose = () => {\n    setselectedCard(null);\n  };\n\n  //Enlist Card\n  const [enlistCard, setenlistCard] = useState([]);\n\n  //function that enlist the bot\n  const handleEnlist = card => {\n    //check if their is a cardbot already enlisted by its class\n    if (!enlistCard.some(enlist => enlist.card_class === card.card_class)) {\n      // if not enlisted\n      setenlistCard(previousenlistCard => [...previousenlistCard, card]);\n    }\n    return;\n  };\n\n  //Fetch data\n  const fetchData = () => {\n    fetch(\"http://localhost:3000/bots\").then(res => res.json()).then(data => setData(data)).catch(error => console.log(\"Error fetching\", error));\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [selectedCard ? /*#__PURE__*/_jsxDEV(BotSpecs, {\n      card: selectedCard,\n      onClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(BotMap, {\n      data: data,\n      onCardClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SortBar, {\n      data: data,\n      setData: setData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(BotCollection, \"Od0FA+Ml5ySruSfgudE19MKiIS8=\");\n_c = BotCollection;\nexport default BotCollection;\nvar _c;\n$RefreshReg$(_c, \"BotCollection\");","map":{"version":3,"names":["React","useEffect","useState","BotMap","BotSpecs","SortBar","BotArmy","jsxDEV","_jsxDEV","BotCollection","_s","data","setData","selectedCard","setselectedCard","handleClick","card","handleClose","enlistCard","setenlistCard","handleEnlist","some","enlist","card_class","previousenlistCard","fetchData","fetch","then","res","json","catch","error","console","log","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","onCardClick","_c","$RefreshReg$"],"sources":["/home/makena/Bot/src/Component/BotCollection.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport BotMap from \"./BotMap\";\nimport BotSpecs from \"./BotSpecs\";\nimport SortBar from \"./SortBar\";\nimport BotArmy from \"./BotArmy\";\nconst BotCollection = () => {\n  //create the state of the current data\n  const [data, setData] = useState([]);\n\n  // create state of the selected card\n  const [selectedCard, setselectedCard] = useState(null);\n\n  //  function that handles the display of the selectedcard\n  const handleClick = (card) => {\n    setselectedCard(card);\n  };\n\n  //  function to close the selected card\n  const handleClose = () => {\n    setselectedCard(null);\n  };\n\n  //Enlist Card\n  const [enlistCard, setenlistCard] = useState([])\n\n   //function that enlist the bot\n    const handleEnlist = (card) => {\n      //check if their is a cardbot already enlisted by its class\n      if(!enlistCard.some(( enlist)=> enlist.card_class === card.card_class)){\n         // if not enlisted\n          setenlistCard((previousenlistCard) => [...previousenlistCard,card])\n      }\n      return \n    }\n\n  //Fetch data\n  const fetchData = () => {\n    fetch(\"http://localhost:3000/bots\")\n      .then((res) => res.json())\n      .then((data) => setData(data))\n      .catch((error) => console.log(\"Error fetching\", error));\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  return (\n    <div>\n      {/* if card is selected render on the BotSpecs */}\n      {selectedCard ? (\n        <BotSpecs card={selectedCard} onClose={handleClose} />\n      ) : (\n        <BotMap data={data} onCardClick={handleClick} />\n      )}\n      <SortBar data={data} setData={setData} />\n    </div>\n  );\n};\n\nexport default BotCollection;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAChC,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1B;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEpC;EACA,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACA,MAAMa,WAAW,GAAIC,IAAI,IAAK;IAC5BF,eAAe,CAACE,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBH,eAAe,CAAC,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAM,CAACI,UAAU,EAAEC,aAAa,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAE/C;EACC,MAAMkB,YAAY,GAAIJ,IAAI,IAAK;IAC7B;IACA,IAAG,CAACE,UAAU,CAACG,IAAI,CAAGC,MAAM,IAAIA,MAAM,CAACC,UAAU,KAAKP,IAAI,CAACO,UAAU,CAAC,EAAC;MACpE;MACCJ,aAAa,CAAEK,kBAAkB,IAAK,CAAC,GAAGA,kBAAkB,EAACR,IAAI,CAAC,CAAC;IACvE;IACA;EACF,CAAC;;EAEH;EACA,MAAMS,SAAS,GAAGA,CAAA,KAAM;IACtBC,KAAK,CAAC,4BAA4B,CAAC,CAChCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEhB,IAAI,IAAKC,OAAO,CAACD,IAAI,CAAC,CAAC,CAC7BmB,KAAK,CAAEC,KAAK,IAAKC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,KAAK,CAAC,CAAC;EAC3D,CAAC;EAED9B,SAAS,CAAC,MAAM;IACdwB,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAA0B,QAAA,GAEGrB,YAAY,gBACXL,OAAA,CAACJ,QAAQ;MAACY,IAAI,EAAEH,YAAa;MAACsB,OAAO,EAAElB;IAAY;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAEtD/B,OAAA,CAACL,MAAM;MAACQ,IAAI,EAAEA,IAAK;MAAC6B,WAAW,EAAEzB;IAAY;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAChD,eACD/B,OAAA,CAACH,OAAO;MAACM,IAAI,EAAEA,IAAK;MAACC,OAAO,EAAEA;IAAQ;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtC,CAAC;AAEV,CAAC;AAAC7B,EAAA,CArDID,aAAa;AAAAgC,EAAA,GAAbhC,aAAa;AAuDnB,eAAeA,aAAa;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}